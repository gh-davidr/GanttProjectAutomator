/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package utils;

import java.util.ArrayList;

import org.richardson.david.entity.gantt.Field;
import org.richardson.david.entity.gantt.Project;
import org.richardson.david.entity.gantt.View;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class ProjectComparator 
{
	@NonNull private Project project1;
	@NonNull private Project project2;

	public 	Boolean areTheySame()
	{
		return sameProject();
	}

	private Boolean sameProject()
	{
		Boolean resultBoolean = true;

		resultBoolean = fn(resultBoolean, cmp(project1.getName(), project2.getName()));
		resultBoolean = fn(resultBoolean, cmp(project1.getCompany(), project2.getCompany()));
		resultBoolean = fn(resultBoolean, cmp(project1.getWebLink(), project2.getWebLink()));
		resultBoolean = fn(resultBoolean, cmp(project1.getViewDate(), project2.getViewDate()));
		resultBoolean = fn(resultBoolean, cmp(project1.getViewDate(), project2.getViewDate()));
		resultBoolean = fn(resultBoolean, cmp(project1.getViewIndex(), project2.getViewIndex()));
		resultBoolean = fn(resultBoolean, cmp(project1.getGanttDividerLocation(), project2.getGanttDividerLocation()));
		resultBoolean = fn(resultBoolean, cmp(project1.getResourceDividerLocation(), project2.getResourceDividerLocation()));
		resultBoolean = fn(resultBoolean, cmp(project1.getVersion(), project2.getVersion()));
		resultBoolean = fn(resultBoolean, cmp(project1.getLocale(), project2.getLocale()));

		resultBoolean = fn(resultBoolean, compareView(project1.getViews(), project2.getViews()));
//		resultBoolean = fn(resultBoolean, compareDayTypes(project1.getCalendars().getDayTypes(), project2.getCalendars().getDayTypes()));

		
		// Decided this is the easiest and strictest comparison ...
		// Full toString comparison
		
		resultBoolean = fn(resultBoolean, compareStrings());

		
		return resultBoolean;
	}
	
	private Boolean compareStrings()
	{
		String project1String = project1.toString();
		String project2String = project2.toString();
		
		return project1String.equals(project2String);
	}

	private Boolean compareView(ArrayList<View> views1, ArrayList<View> views2)
	{
		Boolean resultBoolean = true;
		resultBoolean = fn(resultBoolean, views1.size() == views2.size());

		for (int i = 0; resultBoolean && i < views1.size(); i++)
		{
			View v1 = views1.get(i);
			View v2 = views2.get(i);
			
			resultBoolean = fn(resultBoolean, cmp(v1.getId(), v2.getId()));
			resultBoolean = fn(resultBoolean, cmp(v1.getZoomingState(), v2.getZoomingState()));
			resultBoolean = fn(resultBoolean, compareField(v1.getFields(), v2.getFields()));
		}

		return resultBoolean;
	}

	private Boolean compareField(ArrayList<Field> fields1, ArrayList<Field> fields2)
	{
		Boolean resultBoolean = true;
		resultBoolean = fn(resultBoolean, fields1.size() == fields2.size());

		for (int i = 0; resultBoolean && i < fields1.size(); i++)
		{
			Field v1 = fields1.get(i);
			Field v2 = fields2.get(i);
			
			resultBoolean = fn(resultBoolean, cmp(v1.getId(), v2.getId()));
			resultBoolean = fn(resultBoolean, cmp(v1.getName(), v2.getName()));
			resultBoolean = fn(resultBoolean, cmp(v1.getOrder(), v2.getOrder()));
			resultBoolean = fn(resultBoolean, cmp(v1.getWidth(), v2.getWidth()));
		}

		return resultBoolean;
	}

	private Boolean fn(Boolean check, Boolean res)
	{
		Boolean resultBoolean = res == true ? check : res;
		return resultBoolean;
	}

	private Boolean cmp(String str1, String str2)
	{
		Boolean resultBoolean = true;
		
		resultBoolean = fn(resultBoolean, 
				 (str1 == null && str2 == null) || 
				((str1 != null && str2 != null) && str1.equals(str2)) );

		return resultBoolean;
	}
	
}
