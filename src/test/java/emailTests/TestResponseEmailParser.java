/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
 */
package emailTests;

import org.junit.jupiter.api.Test;
import org.richardson.david.entity.email.TaskStartEmailResponseParser;
import org.richardson.david.entity.gantt.Project;
import org.richardson.david.model.EnrichedTask;
import org.richardson.david.model.Repository;
import entityTests.TestEntityProject;

import org.junit.jupiter.api.Assertions;

public class TestResponseEmailParser  extends TestEntityProject {

	// private static Boolean SHOOSHBoolean = false;
	private static Boolean SHOOSHBoolean = true;

	private static String TASK_ID = "5";
	/*
	 * This is the task entry for task id 5 in the House Build project file
	 * (Chose a random one with complete = 0)
	 * 
           <task id="5" name="Roof" color="#99ccff" meeting="false" start="2021-04-14" duration="10" complete="0" expand="false">
                <depend id="18" type="2" difference="0" hardness="Strong"/>
            </task> 
	 */

	private static Object[][] QUARTER_OBJ_ARR =
		{
				{	"Quarter",                        25L, true},
				{	"1/4",                            25L, true},
				{	".25",                            25L, true},
				{	"0.25",                           25L, true},
				{	"It is quarter complete",         25L, true},
				{	"It is 1/4 done",                 25L, true},
				{	"Just about 0.25  finished",      25L, true},
				{	"Just about 0.250 finished",      25L, true},
		};


	private static Object[][] THIRD_OBJ_ARR = {
			{	"Third",                             33L , true},
			{	"1/3",                               33L , true},
			{	".33333333333333",                   33L , true},  
			{	".3333",                             33L , true},
			{	"It is third complete",              33L , true},
			{	"It is 1/3 done",                    33L , true},
			{	"Just about 0.333  finished",        33L , true},
			{	"Just about 0.3333 finished",        33L , true},
	};


	private static Object[][] HALF_OBJ_ARR = {
			{	"half",                              50L , true},
			{	"1/2",                               50L , true},
			{	".5",                                50L , true},
			{	"0.5",                               50L , true},
			{	"It is half complete",               50L , true},
			{	"It is 1/2 done",                    50L , true},
			{	"Just about 0.5  finished",          50L , true},
			{	"Just about 0.50 finished",          50L , true},
	};



	private static Object[][] TWO_THIRDS_OBJ_ARR = {
			{	"2/3",                                    66L  , true},
			{	".666666666",                             66L  , true},
			{	"0.666666666666",                         66L  , true},
			{	"It is two third complete",               66L  , true},
			{	"It is two thirds complete",              66L  , true},
			{	"It is 2/3 done",                         66L  , true},
			{	"Just about 0.66666  finished",           66L  , true},
			{	"Just about 0.666666666 finished",        66L  , true},
			{	"Two Third",                              66L  , true},
			{	"Two Thirds",                             66L  , true},
	};	

	private static Object[][] THREE_QUARTERS_OBJ_ARR = {
			{	"Three QUArter",                           75L  , true},
			{	"Three QUArters",                          75L  , true},
			{	"3/4",                                     75L  , true},
			{	".75",                                     75L  , true},
			{	"0.75",                                    75L  , true},
			{	"It is three quarter complete",            75L  , true},
			{	"It is three quarters complete",           75L  , true},
			{	"It is 3/4 done",                          75L  , true},
			{	"Just about 0.75  finished",               75L  , true},
			{	"Just about 0.750 finished",               75L  , true},
	};	

	private static Object[][] COMPLETE_OBJ_ARR = {
			{	"complete",                      100L  , true},
			{	"Done",                          100L  , true},
			{	"Finish",                        100L  , true},
			{	"Finished",                      100L  , true},
	};	

	private static Object[][] NOT_COMPLETE_OBJ_ARR = {
			{	"finished",                    100L  , false},  // Set the task to complete and DON'T reset
			{	"not   started",                 0L  , true},   // Then we can test the not started
	};	


	private static Object[][] FRACTION_OBJ_ARR = {
			{	"I've made a start and am now about 3/8 finished",                 37L  , true},
			{	"Good progress, now about 5/8 finished",                           62L  , true},
			{	"Almost done now so about 7/8 finished",                           87L  , true},
	};	


	private static Object[][] DECIMAL_OBJ_ARR = {
			{	"0.37 Complete",                                                   37L  , true},
			{	"I've made a start and am now about 0.35 finished",                35L  , true},
			{	"Good progress, now about .43 finished",                           43L  , true},
			{	"Almost done now so about .88 finished",                           88L  , true},
	};	

	private static Object[][] PERCENTAGE_OBJ_ARR = {
			{	"I've made a start and am now about 35% finished",                 35L  , true},
			{	"Good progress, now about 43 % finished",                          43L  , true},
			{	"Almost done now so about 88% finished",                           88L  , true},
			{   "It is now 46% finished",                                          46L  , true},
			{   "I'm now 23 perc done",                                            23L  , true},
			{   "I'm now 19 percent finished",                                     19L  , true},
	};	


	private static Object[][] ODD_VALUE_OBJ_ARR = {
			{	"19.4 finished",                 19L   , true},
			{	"200% finished",                 100L  , true},
			{	"nearly complete",               100L  , true},
			{	"58",                             58L  , true},

			// Prove failures are handled without updating the tasks
			// These texts will not update the task and this is
			// indicated by an expected value of -1L
			{	"I have no idea how far I am",   -1L  , true},
			{	"What day is it today?",         -1L  , true},
			{	"Ninety Five",                   -1L  , true},

	};	


	private static Object[][] MULTI_LINE_VALUE_OBJ_ARR = {
			{	"First line \r\n"
					+ "Second line \r\n"
					+ "19.4 finished \r\n"
					+ "Third line \r\n" 
					+ ""
					, 19L
					, true},

			{	"Some waffle about why it's delayed \r\n"
					+ "More reasons coming here \r\n"
					+ "We might need a violin if this continues \r\n"
					+ "1% done\r\n"
					+ "Told you I couldn't be trusted with this task \r\n" 
					+ ""
					, 1L
					, true},

			{	"This one might be a bit confusing \r\n"
					+ "As it contains multiple identifiable updates \r\n"
					+ "I'm finished \r\n"
					+ "But then perhaps I'm really only 1% done\r\n"
					+ "Last week I thought I was half way finished\r\n"
					+ "This week who knows\r\n"
					+ "Told you I couldn't be trusted with this task \r\n" 
					+ ""
					, 100L
					, true},
		
			{	"It's half complete \r\n"
					+ "Three QUArters\"\r\n"
					+ "Almost done now so about .88 finished\r\n"
					+ "But then perhaps I'm really only 1% done\r\n"
					+ "Last week I thought I was half way finished\r\n"
					+ "This week who knows\r\n"
					+ ""
					, 50L
					, true},
		
	};	



	private static Object[][] PROHIBITED_WORDS_OBJ_ARR = {

			// These are reserved texts that are looked for and filtered out
			// Prove failures are handled without updating the tasks
			// These texts will not update the task and this is
			// indicated by an expected value of -1L
			{	"{Project Escape the Nine to Five}",                     -1L  , true},
			{	"{Reserved Token for Project Escape-The-Nine-to-Five}",  -1L  , true},
			{	"{Task Id:146}",                                         -1L  , true},
			{	"{Task Id:203}",                                         -1L  , true},
			{	"{Task Id:99}",                                          -1L  , true},
			{	"{Task Id:1}",                                           -1L  , true},
			{	"{Task Id:89}",                                          -1L  , true},
			{	"{Task Id:789}",                                         -1L  , true},

			// Make them more tricky with odd project names
			{	"{Project I have finished all tasks}",                   -1L  , true},
			{	"{Reserved Token for Project 10% complete}",             -1L  , true},

			{	"{Project It is two thirds done}",                       -1L  , true},
			{	"{Reserved Token for Project All Finished}",             -1L  , true},

	};	





	@Test
	void testQuarterObjArr()
	{
		doObjArrayTest(QUARTER_OBJ_ARR);
	}
	@Test
	void testThirdObjArr()
	{
		doObjArrayTest(THIRD_OBJ_ARR);
	}
	@Test
	void testHalfObjArr()
	{
		doObjArrayTest(HALF_OBJ_ARR);
	}
	@Test
	void testTwoThirdObjArr()
	{
		doObjArrayTest(TWO_THIRDS_OBJ_ARR);
	}
	@Test
	void testThreeQuarterObjArr()
	{
		doObjArrayTest(THREE_QUARTERS_OBJ_ARR);
	}
	@Test
	void testCompleteObjArr()
	{
		doObjArrayTest(COMPLETE_OBJ_ARR);
	}
	@Test
	void testNotCompleteObjArr()
	{
		doObjArrayTest(NOT_COMPLETE_OBJ_ARR);
	}
	@Test
	void testFractionObjArr()
	{
		doObjArrayTest(FRACTION_OBJ_ARR);
	}
	@Test
	void testDecimalObjArr()
	{
		doObjArrayTest(DECIMAL_OBJ_ARR);
	}
	@Test
	void testPercentageObjArr()
	{
		doObjArrayTest(PERCENTAGE_OBJ_ARR);
	}
	@Test
	void testOddValueObjArr()
	{
		doObjArrayTest(ODD_VALUE_OBJ_ARR);
	}

	@Test
	void testProhibitedWordsObjArr()
	{
		doObjArrayTest(PROHIBITED_WORDS_OBJ_ARR);
	}

	@Test
	void testMultiLineObjArr()
	{
		doObjArrayTest(MULTI_LINE_VALUE_OBJ_ARR);
	}

	private void doObjArrayTest(Object[][] arr)
	{
		initRepository();
		for (Object[] textValsObjects : arr)
		{
			Assertions.assertTrue(textValsObjects.length == 3);

			int i = 0;
			String  textString = (String)textValsObjects[i++];
			Long    longVaLong = (Long)textValsObjects[i++];
			Boolean resetAfter = (Boolean)textValsObjects[i++];

			doTest(textString, resetAfter, longVaLong);
		}
	}

	private void initRepository()
	{
		Project element = loadProject();
		Assertions.assertTrue(element != null);
		Repository.getInstance(element);
	}

	public void doTest(String body, Boolean resetAfter, Long newVal)
	{
		if (!SHOOSHBoolean)
			System.out.println("Testing: '" + body + "' Expected new val: " + newVal);

		// Get a task
		EnrichedTask task = Repository.getInstance().getEnrichedTaskHashMap().get(TASK_ID);
		Assertions.assertTrue(task != null);

		TaskStartEmailResponseParser responseEmailParser = new TaskStartEmailResponseParser(body, task);

		Assertions.assertTrue(responseEmailParser.getTaskUpdated() || newVal.equals(-1L));
		Assertions.assertFalse(responseEmailParser.getTaskUpdated() && newVal.equals(-1L));

		Assertions.assertTrue(task.getCompleteLong().equals(newVal) ||
				(!responseEmailParser.getTaskUpdated() && newVal.equals(-1L)));

		// Reset task
		if (resetAfter)
			task
			.getTask()
			.setComplete("0");
	}
}
