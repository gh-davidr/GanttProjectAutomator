/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package controlTests;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import org.richardson.david.control.AppControl;
import lombok.Getter;
import utils.UtilsForTests;


public class TestCommandLine {	

	private static Boolean SHOOSHBoolean = true;

	@Getter private static String TEMP_ALWAYS_NOTIFY_CONFIG_FILE = "C:\\temp\\AlwaysNotifySampleUserConfig.yml";
	private static String TEMP_CONFIG_FILE = "C:\\temp\\SampleUserConfig.yml";
	private static String TEMP_PROJECT_FILE = "C:\\Temp\\HouseBuildingSample.gan";

	public TestCommandLine()
	{
		initializeConfig();
	}

	public String getProjectFilePath()
	{
		return TestCommandLine.TEMP_PROJECT_FILE;
	}


	protected void initializeConfig()
	{
		initializeConfig(TEMP_CONFIG_FILE);
	}

	protected void initializeConfig(String configFile)
	{
		createTempTestFilesFromResources();

		String[] args = new String[4];
		int i = 0;
		args[i++] = "-f";
		args[i++] = configFile;
		args[i++] = "-m";
		args[i++] = "notify";
		AppControl.getInstance(args);
	}

	protected void resetForTests()
	{
		removeTempFiles();
		resetSingletons();
	}

	private void resetSingletons()
	{
		try {
			SingletonResets.reset();
		} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
			System.out.println("Error resetting Singletons through reflection\n" + e.toString());
		}
	}

	private void removeTempFiles()
	{
		deleteFile(TEMP_ALWAYS_NOTIFY_CONFIG_FILE);
		deleteFile(TEMP_CONFIG_FILE);
		deleteFile(TEMP_PROJECT_FILE);
	}


	private void createTempTestFilesFromResources()
	{
		createFileFromResource("SampleUserConfig.yml",             TEMP_CONFIG_FILE);
		createFileFromResource("AlwaysNotifySampleUserConfig.yml", TEMP_ALWAYS_NOTIFY_CONFIG_FILE);
		createFileFromResource("HouseBuildingSample.gan",          TEMP_PROJECT_FILE);
	}

	private void createFileFromResource(String resourceFileName, String filePath)
	{
		try {
			File targetFile = new File(filePath);

			if (!targetFile.exists())
			{
				InputStream is = getFileFromResourceAsStream(resourceFileName);

				java.nio.file.Files.copy(
						is, 
						targetFile.toPath(), 
						StandardCopyOption.REPLACE_EXISTING);
				is.close();
				UtilsForTests.assertFileExists(filePath);
			}
		}catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}


	public static InputStream getFileFromResourceAsStream(String fileName) {

		// The class loader that loaded the class
		ClassLoader classLoader = TestCommandLine.class.getClassLoader();
		InputStream inputStream = classLoader.getResourceAsStream(fileName);

		// the stream holding the file content
		if (inputStream == null) {
			throw new IllegalArgumentException("file not found! " + fileName);
		} else {
			return inputStream;
		}
	}

	private void deleteFile(String filename)
	{
		Boolean deletedBoolean = true;
		// Check if file exists
		File checkFile = new File(filename);
		if (checkFile.exists())
		{
			try 
			{
				Files.delete(Paths.get(filename));
			}
			catch (IOException e)
			{
				deletedBoolean = false;
			}
			if (!SHOOSHBoolean)
				System.out.println("deleteFile: File " + filename + (deletedBoolean ? " now deleted" : " NOT deleted"));
		}
		else
		{
			System.out.println("deleteFile: File " + filename + " does not exist");
		}
	}
}
