/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
 */



package loadTests;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.richardson.david.config.UserConfig;
import org.richardson.david.control.AppControlNotify;
import org.richardson.david.load.DataSaver;
import org.richardson.david.model.EnrichedTask;

import utils.UtilsForTests;


/*
 * 
 * Order of running tests ...
 * 
 * Since the TestLoadAndSave updates tasks, it's important that
 * these tests run first since they rely on the file as present
 * in the resources folder
 * 
 * Therefore make sure that TestLoadAndIdentifyTasksToNotify is
 * alphabetically before    TestLoadAndSave
 * 
 */

public class TestLoadAndIdentifyTasksToNotify extends TestLoadBase
{
	private static Object[][] TODAY_NOTIFICATION_TESTS = {

			//   Date (dd-MMM-yyyy)  Include Parent Tasks?      Include non-started FS Predecessors?       Tasks expected to notify
			{	"23-Dec-2020",       false,                     true,                                      "49"},
			{	"23-Dec-2020",       true,                      true,                                      "49"},

			// Both of these have non-zero % complete
			{	"06-Jan-2021",       true,                      true,                                      ""},

			{	"13-Jan-2021",       true,                      true,                                      "13 14"},
			{	"13-Jan-2021",       false,                     true,                                      "13 14"},
			{	"13-Jan-2021",       true,                      false,                                     "13 14"},
			{	"13-Jan-2021",       false,                     false,                                     "13 14"},


			// [1]Foundation Building (0%) depends on [17]Agreement on architectural plan, so one drops off
			{	"27-Jan-2021",       true,                      true,                                      "17 7 1"},
			{	"27-Jan-2021",       false,                     true,                                      "17 1"},				
			{	"27-Jan-2021",       false,                     false,                                     "17"},

			{	"17-Feb-2021",       true,                      true,                                      "2"},
			{	"17-Feb-2021",       true,                      false,                                     ""},
			
			{	"17-Mar-2021",       true,                      true,                                      "4"},

			{	"14-Apr-2021",       true,                      true,                                      "5"},
			{	"14-Apr-2021",       true,                      false,                                     ""},
			
			{	"28-Apr-2021",       true,                      true,                                      "6 16 18 8"},
			{	"28-Apr-2021",       false,                     true,                                      "6 16 18"},
			{	"28-Apr-2021",       false,                     false,                                     ""},
			{	"28-Apr-2021",       true,                      false,                                     "8"},


			{	"05-May-2021",       true,                      true,                                      "15"},
			{	"05-May-2021",       false,                     true,                                      "15"},
			{	"05-May-2021",       true,                      false,                                     ""},
			{	"05-May-2021",       false,                     false,                                     ""},

			{	"12-May-2021",       true,                      true,                                      "20"},
			{	"12-May-2021",       false,                     true,                                      "20"},
			{	"12-May-2021",       true,                      false,                                     ""},
			{	"12-May-2021",       false,                     false,                                     ""},
	};
	
	
	private static Object[][] PAST_DATE_NOTIFICATION_TESTS = {

			
			// Date range 
			//   06-Jan-2021   Start
			//   07-Jan-2021     
			//   08-Jan-2021     1/4
			//   09-Jan-2021     1/2
			//   10-Jan-2021
			//   11-Jan-2021     3/4
			//   12-Jan-2021   End
			
			//   Date (dd-MMM-yyyy)  Include Parent Tasks?      Include non-started FS Predecessors?       Points to notify           Tasks expected to notify
			
			{	"16-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   "1"}, // Start gets picked up differently
			{	"17-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"18-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"19-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"20-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"21-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"22-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"23-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"24-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   "2"}, // Quarter
			{	"25-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"26-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"27-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"28-Feb-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"01-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"02-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"03-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   "2"}, // Half
			{	"04-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"05-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"06-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"07-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"08-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"09-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"10-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   "2"}, // Three Quarters
			{	"11-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"12-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"13-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"14-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"15-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},
			{	"16-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   "2"}, // End
			{	"17-Mar-2021",       false,                     true,                                      "start 1/4 1/2 3/4 end",   ""},

	};

	@Test
	public void testTodayNotifications()
	{
		DataSaver dataSaver = createDataSaver();
		Assertions.assertTrue(dataSaver != null);
		for (Object[] object : TODAY_NOTIFICATION_TESTS)
		{
			runNotifyTodayTest(object);
		}
	}


	@Test
	public void testPastDateNotifications()
	{
		DataSaver dataSaver = createDataSaver();
		Assertions.assertTrue(dataSaver != null);
		for (Object[] object : PAST_DATE_NOTIFICATION_TESTS)
		{
			runNotifyPastDateTest(object);
		}
	}
	
	private void runNotifyTodayTest(Object[] arr)
	{
		//   Date (dd-MMM-yyyy)  Include Parent Tasks?      Include non-started FS Predecessors?       Points to notify           Tasks expected to notify
		Assertions.assertTrue(arr.length == 4);

		int i = 0;
		String  dateString = (String)arr[i++];
		Boolean incParentTasks = (Boolean)arr[i++];
		Boolean incNonStFSTasks = (Boolean)arr[i++];
		String  tasksObjects  = (String)arr[i++];
		String[] taskIdStrings = tasksObjects.split(" ");
		HashSet<String> taskIdHashSet = new HashSet<>();
		for (String t : taskIdStrings) if (t.length() > 0) taskIdHashSet.add(t);
		
		// Set the configs
		UserConfig.getInstance().getNotify().setIncludeParentTasks(incParentTasks);
		UserConfig.getInstance().getNotify().setIncludeNonStartedFSPredecessors(incNonStFSTasks);

		String messageString = "'Today' Date: " + dateString
				+ " IncParentTasks: '" + incParentTasks
				+ "' IncNonStFSTasks: '" + incNonStFSTasks
				+ "' Tasks: '" + tasksObjects + "'";
		
		Assertions.assertEquals(UserConfig.getInstance().getNotify().getIncludeParentTasks(), incParentTasks,
				"Setting IncludeParentTasks " + messageString);
		Assertions.assertEquals(UserConfig.getInstance().getNotify().getIncludeNonStartedFSPredecessors(), incNonStFSTasks,
				"Setting IncludeNonStartedFSTasks " + messageString);


		Date date = UtilsForTests.createDate(dateString, "dd-MMM-yyyy");
		ArrayList<EnrichedTask> todaysTasks = new AppControlNotify(true).getTasksToNotifyStartingToday(date);

		Assertions.assertEquals(taskIdHashSet.size(), todaysTasks.size()
				, "Num Tasks expected not equal to Num Tasks due to be notified... " + messageString);
		
		todaysTasks.forEach(t ->
		{
			Assertions.assertTrue(taskIdHashSet.contains(t.getTask().getId()),
					"Task Id " + t.getTask().getId() + " in list to notify, not found in expected list " + messageString);
		});
	}


	private void runNotifyPastDateTest(Object[] arr)
	{
		//   Date (dd-MMM-yyyy)  Include Parent Tasks?      Include non-started FS Predecessors?       Num tasks expected to notify
		Assertions.assertTrue(arr.length == 5);

		int i = 0;
		String  dateString = (String)arr[i++];
		Boolean incParentTasks = (Boolean)arr[i++];
		Boolean incNonStFSTasks = (Boolean)arr[i++];
		String  pointsToNotify  = (String)arr[i++];
		String  tasksObjects  = (String)arr[i++];
		String[] taskIdStrings = tasksObjects.split(" ");
		HashSet<String> taskIdHashSet = new HashSet<>();
		for (String t : taskIdStrings) if (t.length() > 0) taskIdHashSet.add(t);
		
		// Set the configs
		UserConfig.getInstance().getNotify().setIncludeParentTasks(incParentTasks);
		UserConfig.getInstance().getNotify().setIncludeNonStartedFSPredecessors(incNonStFSTasks);
		UserConfig.getInstance().getNotify().setNotifications(pointsToNotify);

		String messageString = "'Earlier than Today' Date: " + dateString
				+ " IncParentTasks: '" + incParentTasks
				+ "' IncNonStFSTasks: '" + incNonStFSTasks
				+ "' NotifyPoints: '" + pointsToNotify
				+ "' Tasks: '" + tasksObjects + "'";
		
		Assertions.assertEquals(UserConfig.getInstance().getNotify().getIncludeParentTasks(), incParentTasks,
				"Setting IncludeParentTasks " + messageString);
		Assertions.assertEquals(UserConfig.getInstance().getNotify().getIncludeNonStartedFSPredecessors(), incNonStFSTasks,
				"Setting IncludeNonStartedFSTasks " + messageString);
		Assertions.assertEquals(UserConfig.getInstance().getNotify().getNotifications(), pointsToNotify,
				"Setting Notifications " + messageString);


		Date date = UtilsForTests.createDate(dateString, "dd-MMM-yyyy");
		ArrayList<EnrichedTask> todaysTasks = new AppControlNotify(true).getTasksToNotifyStartedBeforeToday(date);
		

		Assertions.assertEquals(taskIdHashSet.size(), todaysTasks.size()
				, "Num Tasks expected not equal to Num Tasks due to be notified... " + messageString);
		
		todaysTasks.forEach(t ->
		{
			Assertions.assertTrue(taskIdHashSet.contains(t.getTask().getId()),
					"Task Id " + t.getTask().getId() + " in list to notify, not found in expected list " + messageString);
		});
	}



}
