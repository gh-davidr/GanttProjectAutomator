/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package modelTests;

import org.junit.jupiter.api.Test;
import org.richardson.david.entity.gantt.Project;
import org.richardson.david.model.EnrichedTask;
import org.richardson.david.model.Repository;
import entityTests.TestEntityProject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Assertions;

public class TestRepository  extends TestEntityProject {
	
	private static SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd/MM/yyyy");
	
	private static String EXISTS_TASK_ID = "18";
	/*
	 * This is the task entry for task id 18 in the House Build project file
	 * (Chose a random one with complete = 0)
	 * 
           <task complete="0" duration="0" expand="true" id="18" meeting="true" name="Construction completed " start="2021-04-28">
	 */

	private static String NOT_EXISTS_TASK_ID = "1800";
	/*
	 * This task id does not exist 
	 */

	@Test
	void testEarlier() {
		
		Project element = loadProject();
		Assertions.assertTrue(element != null);
		
		Repository.getInstance(element);
		
		Assertions.assertEquals(getNumTasksEarlierThan("01/01/2017", true),  0);   // This date is earlier than start of project
		Assertions.assertEquals(getNumTasksEarlierThan("01/01/2017", false), 0);   // This date is earlier than start of project
		Assertions.assertEquals(getNumTasksEarlierThan("01/01/2025", true),  14);  // This date is later than end of project
		Assertions.assertEquals(getNumTasksEarlierThan("01/01/2025", false), 20);  // This date is later than end of project
	}
	
	@Test
	void testLater() {
		
		Project element = loadProject();
		Assertions.assertTrue(element != null);
		
		Repository.getInstance(element);
		
		Assertions.assertEquals(getNumTasksLaterThan("01/01/2017", true),  14);   // This date is earlier than start of project
		Assertions.assertEquals(getNumTasksLaterThan("01/01/2017", false), 20);   // This date is earlier than start of project
		Assertions.assertEquals(getNumTasksLaterThan("01/01/2025", true),  0);    // This date is later than end of project
		Assertions.assertEquals(getNumTasksLaterThan("01/01/2025", false), 0);    // This date is later than end of project
	}

	@Test
	void testEqual() {
		
		Project element = loadProject();
		Assertions.assertTrue(element != null);
		
		Repository.getInstance(element);
				
		Assertions.assertEquals(getNumTasksStartingOn("27/01/2021", true),  3);
		Assertions.assertEquals(getNumTasksStartingOn("23/12/2020", true),  1);  // 2 more but have some progress
		Assertions.assertEquals(getNumTasksStartingOn("06/01/2021", false), 3);  // all 3 have progress
		Assertions.assertEquals(getNumTasksStartingOn("16/10/2021", true),  0);
	}
	
	@Test
	void findTask()
	{
		Project element = loadProject();
		Assertions.assertTrue(element != null);
		
		Repository.getInstance(element);
						
		String validThere1 = "{Task Id:"
				+ EXISTS_TASK_ID
				+ "}";
		String validThere2 = "This is some text \n"
				+ "and some more\r\n"
				+ "{Task Id:"
				+ EXISTS_TASK_ID
				+ "}";
		
		String validNotThere1 = "{Task Id:"
				+ NOT_EXISTS_TASK_ID
				+ "}";
		String validNotThere2 = "This is some text \n"
				+ "and some more\r\n"
				+ "{Task Id:"
				+ NOT_EXISTS_TASK_ID
				+ "}";
	
		String notValidThere1 = "{Task  Id:"
				+ EXISTS_TASK_ID
				+ "}";
		String notValidThere2 = "This is some text \n"
				+ "and some more\r\n"
				+ "{Task Id :"
				+ EXISTS_TASK_ID
				+ "}";

		String notValidNotThere1 = "{Task Id:"
				+ NOT_EXISTS_TASK_ID
				+ "}";
		String notValidNotThere2 = "This is some text \n"
				+ "and some more\r\n"
				+ "{Task Id:"
				+ NOT_EXISTS_TASK_ID
				+ "}";

		Assertions.assertTrue(Repository.getInstance().findEnrichedTaskFromEmail(validThere1) != null);
		Assertions.assertTrue(Repository.getInstance().findEnrichedTaskFromEmail(validThere2) != null);
		
		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(validNotThere1) != null);
		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(validNotThere2) != null);

		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(notValidThere1) != null);
		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(notValidThere2) != null);

		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(notValidNotThere1) != null);
		Assertions.assertFalse(Repository.getInstance().findEnrichedTaskFromEmail(notValidNotThere2) != null);			
	}
	
	private int getNumTasksEarlierThan(String dateStr, Boolean onlyComplete)
	{		
		Date date = null;
		try {
			date = DATE_FORMAT.parse(dateStr);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Assertions.assertTrue(date != null);
		ArrayList<EnrichedTask> list = Repository.getInstance().getTasksStartingEarlierThan(date, onlyComplete);
		
		return list.size();
	}

	private int getNumTasksLaterThan(String dateStr, Boolean onlyComplete)
	{		
		Date date = null;
		try {
			date = DATE_FORMAT.parse(dateStr);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Assertions.assertTrue(date != null);
		ArrayList<EnrichedTask> list = Repository.getInstance().getTasksStartingLaterThan(date, onlyComplete);
		
		return list.size();
	}

	private int getNumTasksStartingOn(String dateStr, Boolean onlyComplete)
	{		
		Date date = null;
		try {
			date = DATE_FORMAT.parse(dateStr);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Assertions.assertTrue(date != null);
		ArrayList<EnrichedTask> list = Repository.getInstance().getTasksStartingOn(date, onlyComplete);
		
		return list.size();
	}
}
