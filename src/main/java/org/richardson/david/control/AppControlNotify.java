/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.control;

import java.util.ArrayList;
import java.util.Date;

import org.richardson.david.config.UserConfig;
import org.richardson.david.entity.email.EmailMessageTaskStart;
import org.richardson.david.model.EnrichedTask;
import org.richardson.david.model.Repository;
import org.richardson.david.utils.AppUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class AppControlNotify extends AppControlBase {

	private static Logger LOGGER = LoggerFactory.getLogger(AppControlNotify.class);
	
	@NonNull protected Boolean reportOnlyBoolean;

	public void doNotify()
	{
		// 1 Get all tasks due to start today and email
		Date now = AppUtils.today();
		ArrayList<EnrichedTask> todaysTasks = Repository.getInstance().getTasksStartingOn(now);
		ArrayList<EmailMessageTaskStart> todaysTaskStarts = new ArrayList<>();
		todaysTasks.forEach(t -> 
		{
			if (UserConfig.getInstance().getNotify().getIncludeParentTasks()
					|| t.getNumDescendants() == 0)
			{
				if (reportOnlyBoolean)
				{
					LOGGER.info(getRunMode() + "  Task Starting Today: " + t.summariseTask());
				}
				else 
				{
					EmailMessageTaskStart emailMessage = new EmailMessageTaskStart(t); 
					emailMessage.sendInitialEmails();
					todaysTaskStarts.add(emailMessage);
				}
			}
		});

		// 2 Get all tasks that have passed already and notify again based on our config
		ArrayList<EnrichedTask> inFlightTasks = Repository.getInstance().getTasksStartingEarlierThan(now);
		ArrayList<EmailMessageTaskStart> inflightTaskStarts = new ArrayList<>();
		inFlightTasks.forEach(t ->
		{
			if (UserConfig.getInstance().getNotify().getIncludeParentTasks()
					|| t.getNumDescendants() == 0)
			{
				Date startDate = t.getStartDate();
				Date endDate   = AppUtils.addDaysToDate(startDate, t.getDurationLong());
				if (UserConfig.getInstance().getNotify().doNotification(startDate, endDate, now))
				{
					// Now get the fraction so we can include in email message too
					Double fractionForNotificationDouble = UserConfig.getInstance().getNotify().getFractionForNotification(startDate, endDate, now);
					
					if (reportOnlyBoolean)
					{
						LOGGER.info(getRunMode() + "  Task Started in the past: " + t.summariseTask());
					}
					else 
					{
						EmailMessageTaskStart emailMessage = new EmailMessageTaskStart(t, fractionForNotificationDouble); 
						emailMessage.sendReminderEmails();
						inflightTaskStarts.add(emailMessage);
					}
				}
			}

		});

		LOGGER.info(getRunMode() + AppVersion.getAppNameString() + "-" + AppVersion.getVersionString());
		if (reportOnlyBoolean)
		{
			LOGGER.info(getRunMode() + "Notifications complete.  Report Only Mode active, so no email notifications actually sent.");
		}
		else 
		{
			LOGGER.info(getRunMode() + "Notifications complete.  " 
					+ todaysTaskStarts.size() + " task" + (todaysTaskStarts.size() == 1 ? "" : "s") + " starting today.  "
					+ inflightTaskStarts.size() + " in-flight task" + (inflightTaskStarts.size() == 1 ? "" : "s") + " with no progress "
					+ "(Notify tasks with 0 progress at " + UserConfig.getInstance().getNotify().getNotifications() + " through duration)"
					);
		}
	}
}
