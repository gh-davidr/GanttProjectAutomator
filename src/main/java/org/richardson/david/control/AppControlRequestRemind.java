/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.control;

import java.util.ArrayList;

import javax.mail.Message;
import javax.mail.internet.InternetAddress;

import org.richardson.david.entity.email.EmailInbox;
import org.richardson.david.entity.email.EmailMessageAlertRemind;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderAll;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderBase;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderRemind;
import org.richardson.david.entity.email.EmailMessageSummary;
import org.richardson.david.entity.email.ReadEmailSession;
import org.richardson.david.model.EnrichedResource;
import org.richardson.david.model.EnrichedTask;
import org.richardson.david.model.Repository;
import org.richardson.david.utils.AppUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class AppControlRequestRemind extends AppControlBase {

	private static Logger LOGGER = LoggerFactory.getLogger(AppControlRequestRemind.class);

	@NonNull private Boolean reportOnlyBoolean;

	public void doRemind()
	{
		doRemind(true);	
	}

	public int doRemind(Boolean log)
	{
		return doRemind(log, new EmailMessageInboxPlaceholderRemind());	
	}

	public int doRemind(Boolean log, EmailMessageInboxPlaceholderBase inboxMonitorPlaceholderEmail)
	{
		return doRemind(new ReadEmailSession(
				EmailMessageInboxPlaceholderBase.addTag(
						new EmailMessageInboxPlaceholderRemind().getInboxMonitorString(), 
						new EmailMessageInboxPlaceholderAll().getInboxMonitorString())),
				log,
				inboxMonitorPlaceholderEmail);	
	}
	
	private int doRemind(ReadEmailSession accountEmails, Boolean log, EmailMessageInboxPlaceholderBase inboxMonitorPlaceholderEmail)
	{		
		int remindersSent = 0;
		int alertsRaised = 0;
		for (Message message : accountEmails.getFolderEmails().getOrderedMessages())
		{
			try {
				String sender = AppUtils.justTheEmailAddress(InternetAddress.toString(message.getReplyTo()).toLowerCase());
				String name   = AppUtils.justTheName(InternetAddress.toString(message.getReplyTo()));
				String bodyString = EmailInbox.getTextFromMessage(message);
				String subject = message.getSubject();
				EnrichedResource resource = getEnrichedResourceForReminder(message);

				if (resource != null)
				{
					EmailMessageSummary emailMessageSummary = new EmailMessageSummary(accountEmails, resource, name);
					if (reportOnlyBoolean)
					{	
						ArrayList<EnrichedTask> notStartedEnrichedTasks = emailMessageSummary.getNotStartedEnrichedTasks();
						ArrayList<EnrichedTask> updatedEnrichedTasks = emailMessageSummary.getUpdatedEnrichedTasks();
						ArrayList<EnrichedTask> upcomingEnrichedTasks = emailMessageSummary.getUpcomingEnrichedTasks();

						notStartedEnrichedTasks.forEach(t -> LOGGER.info("  " + getRunMode() + "Task not yet started: " + t.summariseTask()));
						updatedEnrichedTasks.forEach(t -> LOGGER.info("  " + getRunMode() + "Task in progress: " + t.summariseTask()));
						upcomingEnrichedTasks.forEach(t -> LOGGER.info("  " + getRunMode() + "Upcoming task due to start: " + t.summariseTask()));
					}
					else 
					{
						emailMessageSummary.sendRemindEmail(sender);
						remindersSent++;
					}
				}

				// Alert if ...
				//  1 message is intended for this project
				//  2 message has structure of a reminder
				//  3 message does not include task reference

				else if (Repository.getInstance().messageForThisProject(bodyString) 
						&& Repository.getInstance().messageIsARemind(subject)
						&& !Repository.getInstance().messageReferencesATask(bodyString)) 
				{
					EmailMessageAlertRemind alertEmail = new EmailMessageAlertRemind(message);
					alertEmail.sendAlertEmail();
					alertsRaised++;

					LOGGER.info("  " + getRunMode() + "Resource NOT FOUND to provide a reminder of tasks: " + sender);
				}
			}
			catch (Exception e) {
				LOGGER.error(getRunMode() + "Error handling email responses\n" + e.toString());

			}
		}

		// Put a placeholder email in the list so we don't reprocess task request emails
		// either as valid updates or invalid with alerts raised.
		if (remindersSent + alertsRaised > 0 && inboxMonitorPlaceholderEmail != null)
		{
			inboxMonitorPlaceholderEmail.sendMonitorPlaceholderEmail();			
		}

		if (log)
		{
			if (remindersSent + alertsRaised > 0)
			{
				LOGGER.info(getRunMode() + AppVersion.getAppNameString() + "-" + AppVersion.getVersionString());
			}

			LOGGER.info(getRunMode() + "Reminder complete.  " +
					(reportOnlyBoolean ? "  Report Only Mode active, so no summaries sent"
							: (remindersSent == 1 ? "One reminder sent." : remindersSent + " reminders sent.")));
		}		
		
		return remindersSent + alertsRaised;
	}

	public EnrichedResource getEnrichedResourceForReminder(Message message)
	{
		EnrichedResource resultBoolean = null;

		try {

			String subject = message.getSubject();
			String bodyString = EmailInbox.getTextFromMessage(message);
			String sender = AppUtils.justTheEmailAddress(InternetAddress.toString(message.getReplyTo()).toLowerCase());

			resultBoolean = Repository.getInstance().findEnrichedResourceFromEmail(bodyString, subject, sender);
		}
		catch (Exception e) {
			LOGGER.error(getRunMode() + "Error handling email responses\n" + e.toString());

		}
		return resultBoolean;
	} 
}
