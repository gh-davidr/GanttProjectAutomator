/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.control;

import javax.mail.Message;
import javax.mail.internet.InternetAddress;

import org.richardson.david.config.UserConfig;
import org.richardson.david.entity.email.EmailMessageAlertNotify;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderAll;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderNotify;
import org.richardson.david.entity.email.EmailMessageInboxPlaceholderBase;
import org.richardson.david.entity.email.ReadEmailSession;
import org.richardson.david.model.Repository;
import org.richardson.david.utils.AppUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.NonNull;

public class AppControlRequestNotify extends AppControlNotify 
{
	private static Logger LOGGER = LoggerFactory.getLogger(AppControlRequestNotify.class);

	public AppControlRequestNotify(@NonNull Boolean reportOnlyBoolean) 
	{
		super(reportOnlyBoolean);
		
		// We want to set the config to include "always" in notification fractions
		// That way, when the notifications get sent we sned all active tasks not
		// just those for today...
		UserConfig.getInstance().getNotify().setNotifications("always");
	}
	public void doNotifyAlways()
	{		
		doNotifyAlways(true);
	}

	public int doNotifyAlways(Boolean log)
	{
		return doNotifyAlways(log, new EmailMessageInboxPlaceholderNotify());	
	}
	
	public int doNotifyAlways(Boolean log, EmailMessageInboxPlaceholderBase inboxMonitorPlaceholderEmail)
	{
		return doNotifyAlways(new ReadEmailSession(
				EmailMessageInboxPlaceholderBase.addTag(
						new EmailMessageInboxPlaceholderNotify().getInboxMonitorString(), 
						new EmailMessageInboxPlaceholderAll().getInboxMonitorString())),
				log,
				inboxMonitorPlaceholderEmail);	
	}
	
	private int doNotifyAlways(ReadEmailSession accountEmails, Boolean log, EmailMessageInboxPlaceholderBase inboxMonitorPlaceholderEmail)
	{
		int notificationsRequested = 0;
		int alertsRaised = 0;
		
		String pmEmailString = UserConfig.getInstance().getSummarise().getProjectManager().toLowerCase();
		Boolean assigneesAndPMBoolean = UserConfig.getInstance().getNotify().getAssigneesAndPMOnly();
		
		for (Message message : accountEmails.getFolderEmails().getOrderedMessages())
		{
			try {
				String sender = AppUtils.justTheEmailAddress(InternetAddress.toString(message.getReplyTo()).toLowerCase());

				// Alert if ...
				//  1 Alerts enabled for non-recognised email senders
				//  2 Sender is not a resource on a task
				//  3 Sender is not the PM

				if (assigneesAndPMBoolean &&
						Repository.getInstance().findEnrichedResourceFromEmail(sender) == null &&
						!pmEmailString.equals(sender) )
				{
					EmailMessageAlertNotify alertEmail = new EmailMessageAlertNotify(message);
					alertEmail.sendAlertEmail();
					alertsRaised++;

					LOGGER.info("  " + getRunMode() + "Resource NOT FOUND to request notifications: " + sender);
				}
				else 
				{					
					String subject = message.getSubject();

					if (Repository.getInstance().messageIsAPleaForNotifications(subject))
					{
						notificationsRequested++;
					}
				}

			}
			catch (Exception e) {
				LOGGER.error(getRunMode() + "Error handling email responses\n" + e.toString());
			}
		}

		// If there are any notification requests, then handle them just the once with a single notification
		if (notificationsRequested > 0 )
		{
		   super.doNotify();
		}
		
		// Put a placeholder email in the list so we don't reprocess task request emails
		// either as valid updates or invalid with alerts raised.
		if (notificationsRequested + alertsRaised > 0 && inboxMonitorPlaceholderEmail != null)
		{
			inboxMonitorPlaceholderEmail.sendMonitorPlaceholderEmail();			
		}

		if (log)
		{
			if (notificationsRequested + alertsRaised > 0)
			{
				LOGGER.info(getRunMode() + AppVersion.getAppNameString() + "-" + AppVersion.getVersionString());
			}

			LOGGER.info(getRunMode() + "Notify complete.  " +
					(reportOnlyBoolean ? "  Report Only Mode active, so no notification message sent"
							: (notificationsRequested == 1 ? "One notification message requested." : notificationsRequested + " notification messages requested.")));
		}

		return notificationsRequested + alertsRaised;
	}

}