/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.control;

import java.io.File;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.richardson.david.config.UserConfig;
import org.richardson.david.load.DataLoader;
import org.richardson.david.load.DataSaver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.Getter;

@Getter
public class AppControl 
{
	private static Logger LOGGER = LoggerFactory.getLogger(AppControl.class);

	private static AppControl m_Instance             = null;	
	@Getter(lazy=true) private final DataLoader dataLoader = initDataLoader();
	@Getter(lazy=true) private final DataSaver  dataSaver  = initDataSaver();

	private String  runModeString = "";
	private Boolean validArgsBoolean = false;
	private Boolean reportOnlyBoolean = false;

	private AppControl(String[] args)
	{

		// It's imperative that initialiseConfig is called as soon as possible
		// before any other likely call to retrieve config as it will initialise
		// with any supplied file
		validArgsBoolean = initializeArguments(args);	
	}

	public static AppControl getInstance(String[] args)
	{
		if (m_Instance == null)
		{
			m_Instance = new AppControl(args);
		}
		return AppControl.getInstance();
	}

	public static AppControl getInstance()
	{
		return m_Instance;
	}

	
	public void performNotificationOrAction()
	{
		if (validArgsBoolean)
		{
			getDataLoader();
			LOGGER.debug("STARTUP : MODE=" + runModeString);
			
			// ---------------------------------------------------------
			// Notifications
			// ---------------------------------------------------------

			// Send notification emails of tasks that should now be in progress
			if (runModeString.equals("notify"))
			{

				new AppControlNotify(reportOnlyBoolean).doNotify();
			}
			
			// Handle request to generate a PM summary
			else if (runModeString.equals("summarise"))
			{
				new AppControlSummarise(reportOnlyBoolean).doSummarise();
			}
			
			
			
			// ---------------------------------------------------------
			// Responses
			// ---------------------------------------------------------
			
			// Handle requests from assignees to notify (always) all assignees of tasks
			else if (runModeString.equals("request-notify"))
			{
				new AppControlRequestNotify(reportOnlyBoolean).doNotifyAlways();				
			}

			// Handle requests from assignees to notify (always) all assignees of tasks
			else if (runModeString.equals("request-summarise"))
			{
				new AppControlRequestSummarise(reportOnlyBoolean).doSummarise();				
			}
			
			// Handle requests from assignees of full capabilities of automation
			else if (runModeString.equals("request-help"))
			{
				new AppControlRequestHelp(reportOnlyBoolean).doHelp();				
			}

			// Handle requests from assignees to be reminded of their tasks
			else if (runModeString.equals("request-remind"))
			{
				new AppControlRequestRemind(reportOnlyBoolean).doRemind();				
			}

			// Handle any progress update emails
			else if (runModeString.equals("request-update"))
			{
				new AppControlRequestUpdate(getDataSaver(), reportOnlyBoolean).doUpdate();
			}

			// Handle all of the four requests above in one go
			else if (runModeString.equals("request-all"))
			{
				new AppControlRequestAll(getDataSaver(), reportOnlyBoolean).doAllResponses();				
			}

			
			
			else
			{
				LOGGER.error("Unrecognised Run Mode: {}", runModeString);
			}
			LOGGER.debug("SHUTDOWN : MODE=" + runModeString);
		}
	}
	private Boolean initializeArguments(String[] args)
	{
		Boolean result = true; // Success

		String userConfigFileString = null;

		Options options = new Options();
		addOption(options, "f", "file", true, true, "[Mandatory] User Configuration File");
		addOption(options, "m", "mode", true, true, "[Mandatory] Run Mode - [NOTIFY | SUMMARISE | REQUEST-ALL | REQUEST-NOTIFY | REQUEST-HELP | REQUEST-REMIND | REQUEST-UPDATE]");
		addOption(options, "r", "report", false, false, "[Optional] Report Mode - takes no action");

		CommandLineParser parser = new DefaultParser();
		HelpFormatter formatter = new HelpFormatter();
		CommandLine cmd = null;

		try {
			cmd = parser.parse(options, args);
		} 
		catch (org.apache.commons.cli.ParseException e) 
		{
			System.out.println("Error in Arguments");
			formatter.printHelp("GantProjectAutomator", options);
			result = false;
		}

		if (result)
		{
			runModeString = cmd.getOptionValue("mode").toLowerCase();
			userConfigFileString = cmd.getOptionValue("file");
			reportOnlyBoolean = cmd.hasOption("report");
		}

		initiliaseUserConfig(userConfigFileString);

		return result;
	}

	private void addOption(Options options, String opt, String longOpt, Boolean hasArg, Boolean mandatory, String description)
	{
		Option option = new Option(opt, longOpt, hasArg, description);
		option.setRequired(mandatory);
		options.addOption(option);
	}

	private void initiliaseUserConfig(String path)
	{
		if (path != null)
		{
			// Check file exists
			File filecheckFile = new File(path);

			// If it does, then we use this file
			if (filecheckFile.exists())
			{
				UserConfig.getInstance(path);
			}
			else 
			{
				LOGGER.error("Supplied config file does not exist: " + path);
			}
		}
	}

	private DataLoader initDataLoader()
	{
		return new DataLoader(UserConfig.getInstance().getCommon().getXmlPath());
	}

	private DataSaver initDataSaver()
	{
		return new DataSaver(getDataLoader());
	}

}
