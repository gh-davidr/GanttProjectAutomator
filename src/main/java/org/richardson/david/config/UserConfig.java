/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.config;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yaml.snakeyaml.Yaml;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.AccessLevel;

@Data
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class UserConfig 
{
	private static Logger LOGGER = LoggerFactory.getLogger(UserConfig.class);
	private static UserConfig  m_Instance = null;

	private UserConfigCommon    common    = null;
	private UserConfigNotify    notify    = null;
	private UserConfigUpdate    update    = null;
	private UserConfigRemind    remind    = null;
	private UserConfigHelp      help    = null;
	private UserConfigSummarise summarise = null;

	private UserConfig()
	{

	}
	
	public static UserConfig getInstance()
	{
		return m_Instance;
	}

	public static UserConfig getInstance(String filePath)
	{
		return getInstance(filePath, false);
	}
	
	public static UserConfig getInstance(String configsString, Boolean resource)
	{
		if (m_Instance == null)
		{			 
			LOGGER.debug("Config loading from: " + configsString + " Resource : " + resource);
			
			UserConfig config = new UserConfig();			
			Yaml yaml = new Yaml();
			InputStream inputStream = null;
			try {
				inputStream = resource ? config.getClass()
						.getClassLoader()
						.getResourceAsStream(configsString)
						: new FileInputStream(new File(configsString));
			} catch (FileNotFoundException e) 
			{
				LOGGER.error("Error initialising Configuration system \n" + e.getLocalizedMessage());
				e.printStackTrace();
			}
			m_Instance = yaml.load(inputStream);
		}
		return m_Instance;
	}
	
	@Override
	public String toString()
	{
		StringBuilder sBuilder = new StringBuilder();
		
		sBuilder.append(""
				+ "<ul>"
				+ "<li><b>Common Config     :</b> "  + "<br>\r\n" + common.toString()        + "</li>"
				+ "<li><b>Notify Config     :</b> "  + "<br>\r\n" + notify.toString()        + "</li>"
				+ "<li><b>Update Config     :</b> "  + "<br>\r\n" + update.toString()        + "</li>"
				+ "<li><b>Remind Config     :</b> "  + "<br>\r\n" + remind.toString()        + "</li>"
				+ "<li><b>Help Config       :</b> "  + "<br>\r\n" + help.toString()        + "</li>"
				+ "<li><b>Summarise Config  :</b> "  + "<br>\r\n" + summarise.toString()     + "</li>"
				+ "</ul>"
				);
		
		return sBuilder.toString();
	}

}

