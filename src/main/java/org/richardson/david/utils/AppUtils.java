/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
 */
package org.richardson.david.utils;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AppUtils {

	private static final SimpleDateFormat DISPLAY_DATE_FORMAT = new SimpleDateFormat("dd-MMM-yyyy");

	private static Pattern NAME_EMAIL_PATTERN   = Pattern.compile("(.*)<([\\w-\\@.]*)>");
	private static Pattern JUST_EMAIL_PATTERN   = Pattern.compile("([\\w@\\.-]*)");

	private static final List<Integer> NON_BUSINESS_DAYS = Arrays.asList(
			Calendar.SATURDAY,
			Calendar.SUNDAY
			);

	public static String getDateStr(Date date)
	{
		return DISPLAY_DATE_FORMAT.format(date);
	}

	public static long timeDiffInMinutes(Date start, Date end)
	{
		long result = 0;

		long diffMillies = end.getTime() - start.getTime();

		result = diffMillies / (1000 * 60);

		return result;
	}
	public static long timeDiffInHours(Date start, Date end)
	{
		long result = 0;

		long diffMillies = end.getTime() - start.getTime();

		result = diffMillies / (1000 * 60 * 60);

		return result;
	}
	public static long timeDiffInDays(Date start, Date end)
	{
		long result = 0;

		long diffMillies = end.getTime() - start.getTime();

		result = diffMillies / (1000 * 60 * 60 * 24);

		return result;
	}

	public static Date addBusinessDaysToDate(Date dt, Long businessDays)
	{
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(dt);
		for (int i = 0; i < Math.abs(businessDays);) 
		{
			// here, all days are added/subtracted
			calendar.add(Calendar.DAY_OF_MONTH, businessDays > 0 ? 1 : -1);

			// but at the end it goes to the correct week day.
			// because i is only increased if it is a week day
			if (!NON_BUSINESS_DAYS.contains(calendar.get(Calendar.DAY_OF_WEEK)))
			{
				i++;
			}
		}
		return calendar.getTime();
	}

	public static Date addDaysToDate(Date dt, Long numDays)
	{
		return addDaysToDate(dt, numDays.intValue());
	}
	public static Date addDaysToDate(Date dt, int numDays)
	{
		Date result = new Date(0);

		Calendar c = Calendar.getInstance();
		c.setTime(dt);
		c.add(Calendar.DATE, numDays); // Add one day
		result = c.getTime();

		return result;
	}
	public static Date addMinsToDate(Date dt, Long numMins)
	{
		return addMinsToDate(dt, numMins.intValue());
	}
	public static Date addMinsToDate(Date dt, int numMins)
	{
		Date result = new Date(dt.getTime() + (numMins * 60 * 1000));
		return result;
	}

	public static Date today()
	{
		Date result = new Date(0);

		Calendar c = Calendar.getInstance();

		c.setTime(new Date());
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);

		result = c.getTime();

		return result;
	}

	public static String getCurrentTime()
	{
		Date d = new Date();
		return getDate(d, "yyyyMMddHHmmss");
	}

	public static String getDate(Date d, String format)
	{
		String result = null;		
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		result = sdf.format(d);
		return result;	
	}

	public static boolean isInteger(String strNum) {
		if (strNum == null) {
			return false;
		}
		try {
			@SuppressWarnings("unused")
			int d = Integer.parseInt(strNum);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}

	// https://www.rgagnon.com/javadetails/java-convert-fraction-to-double.html
	public static Double fractionToDouble(String fraction)
	{
		Double d = null;
		if (fraction != null) {
			if (fraction.contains("/")) {
				String[] numbers = fraction.split("/");
				if (numbers.length == 2) {
					BigDecimal d1 = BigDecimal.valueOf(Double.valueOf(numbers[0]));
					BigDecimal d2 = BigDecimal.valueOf(Double.valueOf(numbers[1]));
					BigDecimal response = numbers[1].equals("0") ? BigDecimal.valueOf(0.0) : d1.divide(d2, MathContext.DECIMAL128);
					d = response.doubleValue();
				}
			}
			else {
				d = Double.valueOf(fraction);
			}
		}
		return d;
	}

	public static double round(double value, int places) {
		if (places < 0) throw new IllegalArgumentException();

		BigDecimal bd = new BigDecimal(Double.toString(value));
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}

	public static String justTheEmailAddress(String emailString)
	{
		String resultString = null;

		resultString = resultString == null ? handleStringPattern(emailString, NAME_EMAIL_PATTERN, 2) : resultString;
		resultString = resultString == null ? handleStringPattern(emailString, JUST_EMAIL_PATTERN, 1) : resultString;

		return resultString;
	}

	public static String justTheName(String emailString)
	{
		String resultString = null;

		resultString = resultString == null ? handleStringPattern(emailString, NAME_EMAIL_PATTERN, 1) : resultString;
		resultString = resultString == null ? handleStringPattern(emailString, JUST_EMAIL_PATTERN, 1) : resultString;

		return resultString;
	}

	public static String getLowerString(String str)
	{
		return str == null ? null : str.toLowerCase();
	}

	private static String handleStringPattern(String string, Pattern pattern, int group)
	{
		String result = null;
		Matcher matcher = pattern.matcher(string);
		if (matcher.matches())
		{
			result = matcher.group(group).trim();
		}
		return result;
	}

}
