/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.entity.email;

import java.io.IOException;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMessage.RecipientType;
import org.richardson.david.config.UserConfig;
import org.richardson.david.entity.gantt.Resource;
import org.richardson.david.model.EnrichedTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.Getter;
import lombok.NonNull;

@Getter
public class EmailMessageResponseAck extends EmailMessageBaseTask
{
	private static Logger LOGGER = LoggerFactory.getLogger(EmailMessageResponseAck.class);

	@NonNull private Message message;

	public EmailMessageResponseAck(@NonNull Message message, @NonNull EnrichedTask enrichedTask) {
		super(enrichedTask);
		this.message = message;
	}

	public void sendAcknowledgeEmail()
	{
		String replyToString = "";
		String subject = "";

		Transport transport = null;
		Session session = SendEmailSession.getInstance().getSession();

		UserConfig config = UserConfig.getInstance();

		String mailHost = config.getCommon().getMail().getReadHost();
		String mailUser = config.getCommon().getMail().getUsername();
		String mailPass = config.getCommon().getMail().getPassword();

		try {
			replyToString = InternetAddress.toString(message.getReplyTo());
			String toString = InternetAddress.toString(message.getRecipients(Message.RecipientType.TO));
			subject = message.getSubject();
			//			Date sent = message.getSentDate();

			Message replyMessage =(MimeMessage) message.reply(false);
			replyMessage.setFrom(new InternetAddress(toString));

			//			MimeMessage orig = (MimeMessage) message;
			//			StringBuffer buffer = new StringBuffer(" Thank you for the task update summarised in the acknowledgement below: \n\n "
			//					+ "Task " + getTask().getId() 
			//					+ " '" + getTask().getName() + "'"
			//					+ " has been updated to " + getTask().getComplete()
			//					+ "% by " + replyToString + "\n\n\n");

			// DOn't include original email for now ...

			//			String content = (String) orig.getContent();
			//			StringReader contentReader = new StringReader(content);
			//			BufferedReader br = new BufferedReader(contentReader);
			//			String contentLine;
			//			while ((contentLine = br.readLine()) != null) 
			//			{
			//				buffer.append(orig.isMimeType("text/plain") ? "> " : "");
			//				buffer.append(contentLine);
			//				buffer.append(orig.isMimeType("text/plain") ? "\r\n" : "");
			//			}

			// Set the content
			replyMessage.setContent(getBodyHTML()
					+ quoteOrigEmailHTML(message)
					, "text/html");  

			replyMessage.setReplyTo(message.getReplyTo());

			// Add all the resources on the task if ...
			//  A configured to receive emails
			//  B not the sender of the response

			for (Resource r : getEnrichedTask().getResources())
			{
				if (allowRecipient(r.getContacts().toLowerCase()) &&
						!replyToString.toLowerCase().contains(r.getContacts().toLowerCase()))
					replyMessage.addRecipient(RecipientType.CC, new InternetAddress(r.getContacts()));
			}

			// Send email. 
			transport = session.getTransport("smtp");
			transport.connect(mailHost, mailUser, mailPass);
			transport.sendMessage(replyMessage, replyMessage.getAllRecipients());

			//			Transport.send(replyMessage); 
			LOGGER.info("Acknowledge email successfully sent: " 
					+ " To(" + replyToString +")"
					+ " Subject(" + subject + ")"); 
		} catch (MessagingException e) {
			LOGGER.error("Error sending ack reply message: " 
					+ " To(" + replyToString +")"
					+ " Subject(" + subject + ")");
			e.printStackTrace();

		} 
		catch (IOException e) {
			LOGGER.error("Error sending ack reply message: " 
					+ " To(" + replyToString +")"
					+ " Subject(" + subject + ")");
			e.printStackTrace();
		}
	}

	private String getBodyHTML()
	{
		StringBuilder sBuilder = new StringBuilder();

		sBuilder.append(
				"<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\n"
						+ "xmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\n"
						+ "xmlns:w=\"urn:schemas-microsoft-com:office:word\"\r\n"
						+ "xmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\n"
						+ "xmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\r\n"
						+ "xmlns=\"http://www.w3.org/TR/REC-html40\">\r\n"
						+ "\r\n"
						+ "<head>\r\n"
						+ "<meta http-equiv=Content-Type content=\"text/html; charset=unicode\">\r\n"
						+ "<meta name=ProgId content=Word.Document>\r\n"
						+ "<meta name=Generator content=\"Microsoft Word 15\">\r\n"
						+ "<meta name=Originator content=\"Microsoft Word 15\">\r\n"
						+ "\r\n"
						+ "</style>\r\n"
						+ "\r\n"
						+ "</head>\r\n"
						+ "\r\n"
						+ "<body lang=EN-GB link=blue vlink=purple style='tab-interval:36.0pt;word-wrap:\r\n"
						+ "break-word'>\r\n"
						+ "\r\n"
						+ "<div class=WordSection1>\r\n"
						+ "\r\n"
						+ "<p class=MsoNormal>Thank you for the task update summarised in the acknowledgement below:<o:p></o:p></p>\r\n"
						+ "\r\n"

						+ getTaskTableHTML()
						+ getEmailSignature()
				);

		return sBuilder.toString();
	}
	
}
