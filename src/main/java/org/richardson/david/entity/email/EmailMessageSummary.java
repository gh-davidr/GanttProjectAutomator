/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.entity.email;
import java.util.ArrayList;
import java.util.Date;

import org.richardson.david.config.UserConfig;
import org.richardson.david.entity.gantt.Resource;
import org.richardson.david.model.EnrichedResource;
import org.richardson.david.model.EnrichedTask;
import org.richardson.david.model.Repository;
import org.richardson.david.utils.AppUtils;

import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

// Sends email notifications for a particular task

@Getter
@RequiredArgsConstructor
public class EmailMessageSummary extends EmailMessageBase
{
	// Tasks with start date before today but progress is zero
	@Getter(lazy=true) private final ArrayList<EnrichedTask> notStartedEnrichedTasks = initNotStartedEnrichedTasks();

	// Tasks that have been updated this interval
	@Getter(lazy=true) private final ArrayList<EnrichedTask> updatedEnrichedTasks = initUpdatedEnrichedTasks();

	// Tasks with start date before today but progress is zero
	@Getter(lazy=true) private final ArrayList<EnrichedTask> upcomingEnrichedTasks = initUpcomingEnrichedTasks();

	// Tasks with start date before today but progress is zero
	@Getter(lazy=true) private final ArrayList<EnrichedTask> completedEnrichedTasks = initCompletedEnrichedTasks();


	@NonNull private final ReadEmailSession  accountEmails;
	private EnrichedResource enrichedResource = null;
	private String           addresseeString  = null;

	public EmailMessageSummary(ReadEmailSession  accountEmails, EnrichedResource enrichedResource, String addresseeString)
	{
		super();
		this.accountEmails = accountEmails;
		this.enrichedResource = enrichedResource;
		this.addresseeString = addresseeString;
	}

	public void sendSummaryEmail()
	{
		String pmRecipient = UserConfig.getInstance().getSummarise().getProjectManager().toLowerCase();

		sendEmail(pmRecipient, 
				"Task Summary for Project: '" + Repository.getInstance().getProject().getName() + "'",
				getBodyHTML());
	}

	public void sendRemindEmail(String recipient)
	{
		sendEmail(recipient, 
				"Personal Task Reminder for Project: '" + Repository.getInstance().getProject().getName() + "'",
				getBodyHTML());
	}

	private String getBodyHTML()
	{
		StringBuilder sBuilder = new StringBuilder();

		Long summaryFutureDays = getFutureDays();

		sBuilder.append(
				"<html xmlns:v=\"urn:schemas-microsoft-com:vml\"\r\n"
						+ "xmlns:o=\"urn:schemas-microsoft-com:office:office\"\r\n"
						+ "xmlns:w=\"urn:schemas-microsoft-com:office:word\"\r\n"
						+ "xmlns:x=\"urn:schemas-microsoft-com:office:excel\"\r\n"
						+ "xmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\"\r\n"
						+ "xmlns=\"http://www.w3.org/TR/REC-html40\">\r\n"
						+ "\r\n"
						+ "<head>\r\n"
						+ "<meta http-equiv=Content-Type content=\"text/html; charset=unicode\">\r\n"
						+ "<meta name=ProgId content=Word.Document>\r\n"
						+ "<meta name=Generator content=\"Microsoft Word 15\">\r\n"
						+ "<meta name=Originator content=\"Microsoft Word 15\">\r\n"
						+ "\r\n"
						+ "</style>\r\n"
						+ "\r\n"
						+ "</head>\r\n"
						+ "\r\n"
						+ "<body lang=EN-GB link=blue vlink=purple style='tab-interval:36.0pt;word-wrap:\r\n"
						+ "break-word'>\r\n"
						+ "\r\n"
						+ "<div class=WordSection1>\r\n"
						+ "\r\n"
						+ "<p class=MsoNormal>Dear " + (addresseeString != null ? addresseeString : "Project Manager") + ",<o:p></o:p></p>\r\n"
						+ "\r\n"
						+ "<p class=MsoNormal><o:p>&nbsp;</o:p></p>\r\n"
						+ "\r\n"
						+  (addresseeString == null 
						? "<p class=MsoNormal>Please find the project summary outlined below.<o:p></o:p></p>\r\n"
								: "<p class=MsoNormal>Please find your personalised task summary for the project outlined below.<o:p></o:p></p>\r\n")
						+ "\r\n"
						+ "<p class=MsoNormal><o:p>&nbsp;</o:p></p>\r\n"
						+ "\r\n"
				);


		sBuilder.append(addTaskTable(getNotStartedEnrichedTasks(), 
				"<p class=MsoNormal><b>Table below lists all tasks with start date in the past and zero progress:</b><o:p></o:p></p>\r\n"
				, "<p class=MsoNormal><b>There are no tasks with start date in the past and zero progress.</b><o:p></o:p></p>\r\n"));
		
		// Add commentary about suppressing not-started tasks with predecessors that haven't started too.
		if (!UserConfig.getInstance().getNotify().getIncludeNonStartedFSPredecessors())
		{
			sBuilder.append("<br><b>Note: Option is set to NOT notify tasks where predecessor tasks themselves have not started.</b>");
		}

		sBuilder.append(addTaskTable(getUpdatedEnrichedTasks(), 
				"<p class=MsoNormal><b>Table below lists all tasks that are currently \"In Progress\":</b><o:p></o:p></p>\r\n"
				,"<p class=MsoNormal><b>There are no tasks currently \"In Progress\".</b><o:p></o:p></p>\r\n"));

		sBuilder.append(addTaskTable(getUpcomingEnrichedTasks(), 
				 "<p class=MsoNormal><b>Table below lists all tasks that are due to start in the next " + summaryFutureDays + " days:</b><o:p></o:p></p>\r\n"
				,"<p class=MsoNormal><b>No tasks are due to start in the next " + summaryFutureDays + " days.</b><o:p></o:p></p>\r\n"));

		sBuilder.append(addTaskTable(getCompletedEnrichedTasks(), 
				 "<p class=MsoNormal><b>Table below lists all tasks that are now completed:</b><o:p></o:p></p>\r\n"
				,"<p class=MsoNormal><b>No tasks are completed.</b><o:p></o:p></p>\r\n"));

		
		sBuilder.append(getEmailSignature());


		return sBuilder.toString();
	}

	private String addTaskTable(ArrayList<EnrichedTask> list, String messageIfSome, String messageIfNone)
	{
		StringBuilder sBuilder = new StringBuilder();

		if (list.size() > 0)
		{
			sBuilder.append(messageIfSome);
			sBuilder.append(getTaskTableStartHTML());
			sBuilder.append(getTaskTableHeaderRowHTML());
			list.forEach(
					t -> {
						if (UserConfig.getInstance().getSummarise().getIncludeParentTasks()
								|| t.getNumDescendants() == 0)
							sBuilder.append(getTaskRowHTML(t));
					});
			sBuilder.append(getTaskTableEndHTML());
		}
		else
		{
			sBuilder.append(messageIfNone);			
		}

		return sBuilder.toString();
	}

	protected Long getFutureDays()
	{
		return UserConfig.getInstance().getSummarise().getSummaryFutureDays();
	}


	protected ArrayList<EnrichedTask> initNotStartedEnrichedTasks()
	{
		Date now = AppUtils.today();
		return Repository.getInstance().getTasksStartingEarlierThan(now, true, getResource());
	}

	protected ArrayList<EnrichedTask> initUpdatedEnrichedTasks()
	{
		return Repository.getInstance().getEnrichedTasksInProgress(getResource());
	}

	protected ArrayList<EnrichedTask> initUpcomingEnrichedTasks()
	{
		Date now = AppUtils.today();
		Long summaryFutureDays = UserConfig.getInstance().getSummarise().getSummaryFutureDays();
		Date thenDate = AppUtils.addDaysToDate(now, summaryFutureDays);
		return Repository.getInstance().getTasksStartingBetween(now, thenDate, false, getResource());  // Include tasks even if in progress
	}

	protected ArrayList<EnrichedTask> initCompletedEnrichedTasks()
	{
		return Repository.getInstance().getEnrichedTasksCompleted(getResource());
	}	

	private Resource getResource()
	{
		return enrichedResource == null ? null : enrichedResource.getResource();
	}

}
