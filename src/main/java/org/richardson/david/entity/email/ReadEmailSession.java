/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.entity.email;

import java.util.Properties;
import javax.mail.Folder;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Store;
import org.richardson.david.config.UserConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import lombok.Getter;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Value;

@Value
@RequiredArgsConstructor
public class ReadEmailSession 
{
	private static Logger LOGGER = LoggerFactory.getLogger(ReadEmailSession.class);

	@Getter(lazy=true) private Store       store = initStore();
	@Getter(lazy=true) private Folder      inboxFolder = initInboxFolder();
	@Getter(lazy=true) private EmailInbox  folderEmails = initFolderEmails();
	
	@NonNull private final String inboxMonitorString;

	public void close() throws MessagingException
	{
		getFolderEmails().getFolder().close();
		getInboxFolder().close();
		getStore().close();
	}

	private Store initStore()
	{
		// Used https://stackoverflow.com/questions/61176/getting-mail-from-gmail-into-java-application-using-imap
		Store resultStore = null;

		UserConfig config = UserConfig.getInstance();

		String mailHost = config.getCommon().getMail().getReadHost();
		String mailUser = config.getCommon().getMail().getUsername();
		String mailPass = config.getCommon().getMail().getPassword();


		Properties props = System.getProperties();
		props.setProperty("mail.store.protocol", "imaps");

		// Increase Fetch size to improve performance
		props.setProperty("mail.imap.fetchsize", "819200");

		Session session = Session.getInstance(props, null);
		try {
			resultStore = session.getStore("imaps");
			resultStore.connect(mailHost, mailUser, mailPass);
		} catch (MessagingException e) {
			LOGGER.error("Error opening email account to look for response emails\n" + e.toString());
		}

		return resultStore;
	}

	private Folder initInboxFolder() 
	{
		Folder result = null;

		try {
			result = getStore().getFolder("INBOX");
			result.open(Folder.READ_ONLY);
		}
		catch (MessagingException e) {
			LOGGER.error("Error getting or opening Inbox\n" + e.toString());
			System.exit(1);
		}
		return result;
	}

	private EmailInbox initFolderEmails()
	{
		EmailInbox resultEmails = null;
		try {
			resultEmails = new EmailInbox(getInboxFolder()
					, getInboxFolder().getFullName()
					, getInboxFolder().getMessages()
					, inboxMonitorString
					);
		} catch (MessagingException e) {
			LOGGER.error("Error retrieving emails from Inbox\n" + e.toString());
			System.exit(1);
		}

		return resultEmails;
	}

}
