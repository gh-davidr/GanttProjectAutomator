/*
Copyright 2021 David Richardson, a regular GanttProject User

This file is part of GanttProjectAutomator, a utility conceived from
years of project management experience to make task status communication
just a little bit easier.

It works specifically with files generated by GanttProject, an 
open source project management tool.

GanttProjectAutomator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

GanttProjectAutomator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.
*/
package org.richardson.david.entity.email;

import java.util.Properties;

import javax.mail.PasswordAuthentication;
import javax.mail.Session;

import org.richardson.david.config.UserConfig;

import lombok.Value;

@Value
public class SendEmailSession {
	private static SendEmailSession m_Instance               = null;
		
	private Properties properties;
	private Session    session;
	private String     from;

	private SendEmailSession()
	{
		UserConfig config = UserConfig.getInstance();

		String mailHost = config.getCommon().getMail().getReadHost();
		String mailUser = config.getCommon().getMail().getUsername();
		String mailPass = config.getCommon().getMail().getPassword();
		Long   mailPort = config.getCommon().getMail().getSendPort();
		
		from = config.getCommon().getMail().getUsername();
		
		properties = new Properties();
		properties.setProperty("mail.transport.protocol", "smtp");     
	    properties.setProperty("mail.host", "smtp.gmail.com");  
		properties.put("mail.smtp.host", mailHost);
		properties.put("mail.smtp.port", mailPort.intValue());
		properties.put("mail.smtp.auth", "true"); 
	//	properties.put("mail.debug", "true");  
		properties.put("mail.user", mailUser);
		properties.put("mail.password", mailPass);
		properties.put("mail.smtp.socketFactory.port", mailPort.intValue());  
		properties.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");  
	    properties.put("mail.smtp.socketFactory.fallback", "false");  
		
		session = Session.getInstance(properties, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(mailUser, mailPass);
			}
		});
	}
	
	public static SendEmailSession getInstance()
	{
		if (m_Instance == null)
		{
			m_Instance = new SendEmailSession();
		}
		return m_Instance;
	}
}
